const WizardScene = require('telegraf/scenes/wizard')
const Composer = require('telegraf/composer')
const Markup = require('telegraf/markup')
const Extra = require('telegraf/extra')

let userModel = require('../mongoose/models/user-model')
const axios = require('axios');
var fs = require('fs');

const temp1 = require('./pdf-temp/temp1');

let imageLoad = false;


let checkData = (ctx, field, reply, back) => {
    if(back){
        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                
            if(ext[field] == undefined){
                ctx.reply(reply, Markup.inlineKeyboard([
                    Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next')
                ]).extra())
            }else{
                ctx.reply(`${reply}
    
(${ext[field]}) - —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ.`, Markup.inlineKeyboard([
                    Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
                ]).extra())                           
            }
        })  
    }else{
        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                
            if(ext[field] == undefined){
                ctx.reply(reply, Markup.inlineKeyboard([
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
                ]).extra())
            }else{
                ctx.reply(`${reply}
    
    (${ext[field]}) - —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ.`, Markup.inlineKeyboard([
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
                ]).extra())                           
            }
        })
    }
}

let updateData = async (ctx, value, field) => {
    try {
        if(ctx.message.text !== undefined){
            await userModel.findOneAndUpdate({telegramId: ctx.from.id},
                {
                    [field]: value.message.text,
                }
            )
        }
    } catch (error) {
    } 
}

let checkDataArr = (ctx, field,key, reply) => {
    userModel.findOne({telegramId: ctx.from.id, [field]: {$elemMatch: {type: key}}}, async (err, ext) => {
        if(ext !== null){
            ext.contacts.forEach((con) => {
                if(con.type == key){
                    ctx.reply(`${reply}
    
(${con.value}) - —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ.`, Markup.inlineKeyboard([
                    Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
                ]).extra())  
                }
            })
             
        }else{
            ctx.reply(`${reply}`, Markup.inlineKeyboard([
                    Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
                ]).extra())   
        }

    })
}

let checkDataMass = (ctx, field, reply, removeOpt) => {
    userModel.findOne({telegramId: ctx.from.id}, (err, ext) => {
        if(!ext[field].length){
            ctx.reply(reply,
            Markup.inlineKeyboard([
                Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
                Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'nextExtra'),
            ]).extra()) 
        }else{
            ctx.reply(reply,
                Markup.inlineKeyboard([
                    Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
                    Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'nextExtra'),
                ]).extra()).then(() => {
                    ctx.reply('–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ')
                    ext[field].forEach((skill) => {
                        ctx.reply(skill.name, Markup.inlineKeyboard([
                            Markup.callbackButton('–£–¥–∞–ª–∏—Ç—å', removeOpt),
                        ]).extra())
                    })
                })
        }
    })
}

// let checkDataMassSecond = (ctx, field, reply) => {
//     userModel.findOne({telegramId: ctx.from.id}, (err, ext) => {
//         if(!ext[field].length){
//             ctx.reply(reply,
//             Markup.inlineKeyboard([
//                 Markup.callbackButton('–ù–∞–∑–∞–¥', 'backExtra'),
//                 Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'nextExtra'),
//             ]).extra()) 
//         }else{
//             ctx.reply(reply,
//                 Markup.inlineKeyboard([
//                     Markup.callbackButton('–ù–∞–∑–∞–¥', 'backExtra'),
//                     Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'nextExtra'),
//                 ]).extra()).then(() => {
//                     ctx.reply('–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ: ')
//                     ext[field].forEach((skill) => {
//                         ctx.reply(skill.name, Markup.inlineKeyboard([
//                             Markup.callbackButton('–£–¥–∞–ª–∏—Ç—å', 'remove'),
//                         ]).extra())
//                     })
//                 })
//         }
//     })
// }


const create_pdf = new WizardScene('create-pdf',

     //FIRSTNAME
    async (ctx) => {
        await checkData(ctx, 'firstName', '–ò —Ç–∞–∫, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è <–ë–ï–ó –§–ê–ú–ò–õ–ò–ò> (1/9)', false)

        return ctx.wizard.next()
    }, 

    //LASTNAME
    async (ctx) => {
        updateData(ctx, ctx, 'firstName', false)

        await checkData(ctx, 'lastName', '–¢–µ–ø–µ—Ä—å —Ñ–∞–º–∏–ª–∏—é (2/11)', true)

        return ctx.wizard.next()
    },

    //WORKNAME
    async (ctx) => {
        updateData(ctx, ctx, 'lastName', false)

        await checkData(ctx, 'workName', '–¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å üë©‚ÄçüöÄ (3/11)', true)

        return ctx.wizard.next();
    },

    //ABOUT
    async (ctx) => {
        updateData(ctx, ctx, 'workName', false)

        await checkData(ctx, 'about', '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ üë©‚Äçüíª 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (4/11)', true)        
        
        return ctx.wizard.next()
    },
    
    //PHONE
    async (ctx) => {
        updateData(ctx, ctx, 'about', false)

        ctx.reply('–¢–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (5/11)').then(
            await checkDataArr(ctx, 'contacts', 'phone', '–¢–µ–ª–µ—Ñ–æ–Ω üìû (–ø—Ä. +38099486757)')
        )
        
        return ctx.wizard.next()                           
    },

    //EMAIL
    async (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'phone'}}}, async (err, ext) => {
                if(ext == null){
                    userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                        ext.contacts.push( {
                            type: 'phone',
                            caption: 'Phone',
                            value: ctx.message.text
                        });
                        await ext.save();
                    })
                }else{
                    await userModel.findOneAndUpdate({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'phone'}}},{ $set: { "contacts.$.value":  ctx.message.text, "contacts.$.type":  'phone', "contacts.$.caption":  'Phone'}},(err, ext) => {
                        console.log(err)
                    })
                }
            })
        } catch (error) {  
        }

        await checkDataArr(ctx, 'contacts', 'email', 'Email üíå (–ø—Ä. interns@go.com)')

        return ctx.wizard.next()                           
    },

    //LINKEDIN
    async (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'email'}}}, async (err, ext) => {
                if(ext == null){
                    userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                        ext.contacts.push( {
                            type: 'email',
                            caption: 'Email',
                            value: ctx.message.text
                        });
                        await ext.save();
                    })
                }else{
                    await userModel.findOneAndUpdate({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'email'}}},{ $set: { "contacts.$.value":  ctx.message.text, "contacts.$.type":  'email', "contacts.$.caption":  'Email'}})

                }
            })
        } catch (error) {  
        }

        await checkDataArr(ctx, 'contacts', 'linkedin', 'LinkedIn üíº (–ø—Ä. linkedin.com/pastukh)')

        return ctx.wizard.next()                           
    },

    //TELEGRAM
    async (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'linkedin'}}}, async (err, ext) => {
                if(ext == null){
                    userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                        ext.contacts.push( {
                            type: 'linkedin',
                            caption: 'LinkedIn',
                            value: ctx.message.text
                        });
                        await ext.save();
                    })
                }else{
                    await userModel.findOneAndUpdate({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'linkedin'}}},{ $set: { "contacts.$.value":  ctx.message.text, "contacts.$.type":  'linkedin', "contacts.$.caption":  'LinkedIn'}})
                }
            })
        } catch (error) {  
        }

        await checkDataArr(ctx, 'contacts', 'telegram', '–¢–µ–ª–µ–≥—Ä–∞–º üõ© (–ø—Ä. @bob_pasta)')
        
        return ctx.wizard.next()                           
    },

    //proskills
    async (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'telegram'}}}, async (err, ext) => {
                if(ext == null){
                    userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                        ext.contacts.push( {
                            type: 'telegram',
                            caption: 'Telegram',
                            value: ctx.message.text
                        });
                        await ext.save();
                    })
                }else{
                    await userModel.findOneAndUpdate({telegramId: ctx.from.id,contacts: {$elemMatch: {type: 'telegram'}}},{ $set: { "contacts.$.value":  ctx.message.text, "contacts.$.type":  'telegram', "contacts.$.caption":  'Telegram'}})
                }
            })
        } catch (error) {  
        }
        
        await checkDataMass(ctx, 'proskills', '–¢–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ üîÜ 2-5 –Ω–∞–≤—ã–∫–∞ (6/11)', 'removePros')
        
        return ctx.wizard.next()                  
    },
    async (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                ext.proskills.push({
                    name: ctx.message.text,
                });
                await ext.save();
            })
        } catch (error) {  
        }
        ctx.reply('–ù–∞–ø–∏—à–∏ –µ—â–µ, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Ö–≤–∞—Ç–∏—Ç üëá',
        Markup.inlineKeyboard([
            Markup.callbackButton('–•–≤–∞—Ç–∏—Ç', 'nextExtra'),
        ]).extra())                
    },
    
    
    //LANGUAGE
    async (ctx) => {
        
        await checkDataMass(ctx, 'languages', '–¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —è–∑—ã–∫–∞ üàµ (7/11)', "removeLang")
        
        return ctx.wizard.next()                           
    },
    async (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                ext.languages.push({
                    name: ctx.message.text,
                });
                await ext.save();
            })
        } catch (error) {  
        }
    
        ctx.reply('–ù–∞–ø–∏—à–∏ –µ—â–µ, –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Ö–≤–∞—Ç–∏—Ç üëá',
        Markup.inlineKeyboard([
            Markup.callbackButton('–•–≤–∞—Ç–∏—Ç', 'nextExtra'),
        ]).extra())              
    },

    //EDUCATION
    (ctx) => {
        ctx.reply(`–¢–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. üéì (8/11)`, Markup.inlineKeyboard([
            Markup.callbackButton('–ù–∞–∑–∞–¥', 'backExtra'),
            Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'nextEdu'),
        ]).extra())
        .then(async () => {
            try {
                await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                    if(ext.education.length){
                        ext.education.forEach((edu) => {
                            ctx.reply(edu.univerName, Markup.inlineKeyboard([
                                Markup.callbackButton('–£–¥–∞–ª–∏—Ç—å', 'removeUniver'),
                            ]).extra())
                        })
                    }
                })
            } catch (error) {
                
            }
        })
        .then(() => {
            ctx.reply(`–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–ª–∏ —à–∫–æ–ª—ã:`, Markup.inlineKeyboard([
                Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', 'nextEdu'),
            ]).extra())
        })
        
        return ctx.wizard.next()                       
    },

    (ctx) => {
        try {
            userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                ext.education.push( {
                    univerName: ctx.message.text,
                });
                await ext.save();
            })
        } catch (error) {  
        }


        ctx.reply(`–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: `)
        
        return ctx.wizard.next()                       
    },

    (ctx) => {

        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.education.forEach(async (univ) => {
                if(univ.univerName !== undefined){
                    if(univ.workName == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id,education: {$elemMatch: {univerName: univ.univerName}}},{ $set: { "education.$.workName":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–ì–æ—Ä–æ–¥: `)
        
        return ctx.wizard.next()                       
    },

    (ctx) => {

        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.education.forEach(async (univ) => {
                if(univ.workName !== undefined){
                    if(univ.city == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id,education: {$elemMatch: {workName: univ.workName}}},{ $set: { "education.$.city":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–°—Ç—Ä–∞–Ω–∞: `)
        
        return ctx.wizard.next()                       
    },

    (ctx) => {

        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.education.forEach(async (univ) => {
                if(univ.city !== undefined){
                    if(univ.country == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id, education: {$elemMatch: {city: univ.city}}},{ $set: { "education.$.country":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–ì–æ–¥ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: `)
        
        return ctx.wizard.next()                       
    },
    (ctx) => {

        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.education.forEach(async (univ) => {
                if(univ.country !== undefined){
                    if(univ.timeFrom == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id, education: {$elemMatch: {country: univ.country}}},{ $set: { "education.$.timeFrom":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–ì–æ–¥ –∫–æ–Ω—Ü–∞ –æ–±—É—á–µ–Ω–∏—è: `)
        
        return ctx.wizard.next()                       
    },

    (ctx) => {

        userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.education.forEach(async (univ) => {
                if(univ.timeFrom !== undefined){
                    if(univ.timeTo == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id, education: {$elemMatch: {timeFrom: univ.timeFrom}}},{ $set: { "education.$.timeTo":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ? –ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`, Markup.inlineKeyboard([
            Markup.callbackButton('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', 'backUltra'),
            Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
        ]).extra()) 
        
        return ctx.wizard.next()                       
    },


    //EXPERIENCE
    async (ctx) => {
        ctx.reply(`–¢–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã. üíº (9/11)`, Markup.inlineKeyboard([
            Markup.callbackButton('–ù–∞–∑–∞–¥', 'backEdu'),
            Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'nextExp'),
        ]).extra())
        .then(async () => {
            try {
                await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                    if(ext.experience.length){
                        ext.experience.forEach((edu) => {
                            ctx.reply(edu.companyName, Markup.inlineKeyboard([
                                Markup.callbackButton('–£–¥–∞–ª–∏—Ç—å', 'removeWork'),
                            ]).extra())
                        })
                    }
                })
            } catch (error) {
                
            }
        })
        .then(() => {
            ctx.reply(`–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:`, Markup.inlineKeyboard([
                Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã', 'nextExp'),
            ]).extra())
        })
        
        return ctx.wizard.next()                       
    },

    async (ctx) => {
        try {
            await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
                ext.experience.push( {
                    companyName: ctx.message.text,
                });
                await ext.save();
            })
        } catch (error) {  
        }


        ctx.reply(`–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: `)
        
        return ctx.wizard.next()                       
    },

    async (ctx) => {

        await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.experience.forEach(async (univ) => {
                if(univ.companyName !== undefined){
                    if(univ.workName == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id,experience: {$elemMatch: {companyName: univ.companyName}}},{ $set: { "experience.$.workName":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–ì–æ—Ä–æ–¥: `)
        
        return ctx.wizard.next()                       
    },

    async (ctx) => {

        await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.experience.forEach(async (univ) => {
                if(univ.workName !== undefined){
                    if(univ.city == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id,experience: {$elemMatch: {workName: univ.workName}}},{ $set: { "experience.$.city":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–°—Ç—Ä–∞–Ω–∞: `)
        
        return ctx.wizard.next()                       
    },

    async (ctx) => {

        await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.experience.forEach(async (univ) => {
                if(univ.city !== undefined){
                    if(univ.country == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id, experience: {$elemMatch: {city: univ.city}}},{ $set: { "experience.$.country":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–ì–æ–¥ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: `)
        
        return ctx.wizard.next()                       
    },
    async (ctx) => {

        await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.experience.forEach(async (univ) => {
                if(univ.country !== undefined){
                    if(univ.timeFrom == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id, experience: {$elemMatch: {country: univ.country}}},{ $set: { "experience.$.timeFrom":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–ì–æ–¥ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã: `)
        
        return ctx.wizard.next()                       
    },

    async (ctx) => {

        await userModel.findOne({telegramId: ctx.from.id}, async (err, ext) => {
            ext.experience.forEach(async (univ) => {
                if(univ.timeFrom !== undefined){
                    if(univ.timeTo == undefined){
                        await userModel.findOneAndUpdate({telegramId: ctx.from.id, experience: {$elemMatch: {timeFrom: univ.timeFrom}}},{ $set: { "experience.$.timeTo":  ctx.message.text}})
                    }
                }
            })
        })

        ctx.reply(`–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ? –ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å`, Markup.inlineKeyboard([
            Markup.callbackButton('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', 'backUltra'),
            Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
        ]).extra()) 
        
        return ctx.wizard.next()                       
    },

    //ACHIVEMENTS
    (ctx) => {
        ctx.reply(`–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. üî• (10/11)

2-4 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

–§–æ—Ä–º–∞—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ`,
        Markup.inlineKeyboard([
            Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
        ]).extra()) 
        
        return ctx.wizard.next()                       
    },


    //photo
    (ctx) => { 
        ctx.reply(`–¢–≤–æ—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. üèô (11/11)

–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ JPG`,
        Markup.inlineKeyboard([
            Markup.callbackButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'next'),
        ]).extra()) 

        return ctx.wizard.next();
    },

    //EXIT
    async (ctx) => {
        userModel.findOneAndUpdate({telegramId: ctx.from.id},
            {
                data: userData
            })
        try {
            const files = ctx.update.message.photo;
            fileId = files[1].file_id
            ctx.telegram.getFileLink(fileId).then(url => {    
                axios({url, responseType: 'stream'}).then(response => {
                    return new Promise((resolve, reject) => {
                        
                        response.data.pipe(fs.createWriteStream(`${ctx.update.message.from.id}.jpg`))
                                    .on('finish', (res) => { 
                                        imageLoad = true;
                                        ctx.reply('–ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑—é–º–µ...');
                                        

                                        temp1.create(userData, ctx, imageLoad)

                                        ctx.telegram.sendDocument(ctx.from.id, {
                                            source: fs.createReadStream(`${ctx.from.id}.pdf`),
                                            filename: `${ctx.from.id}.pdf`
                                        }).then(()=>{
                                            ctx.reply('–ò –≤–æ—Ç —Ç–≤–æ–µ —Ä–µ–∑—é–º–µ) –£–¥–∞—á–∏! üòâ',
                                            Markup.inlineKeyboard([
                                                Markup.callbackButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'menu-scene'),
                                            ]).extra()) 
                                        }).then(() => {
                                            fs.unlink(`${ctx.from.id}.pdf`, (err) => {
                                                if (err) throw err;
                                            })
                                            fs.unlink(`${ctx.update.message.from.id}.jpg`, (err) => {
                                                if (err) throw err;
                                                })
                                            } 
                                        )

                                        return ctx.scene.leave() 
                                    })
                                    .on('error', e => {
                                        ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ /start")
                                        return ctx.scene.leave() 
                                    })
                            });
                        })
            })

        } catch (error) {
            imageLoad = false;

            temp1.create(userData, ctx, imageLoad)

            ctx.telegram.sendDocument(ctx.from.id, {
                source: fs.createReadStream(`${ctx.from.id}.pdf`),
                filename: `${ctx.from.id}.pdf`
            }).then(()=>{
                ctx.reply('–ò –≤–æ—Ç —Ç–≤–æ–µ —Ä–µ–∑—é–º–µ) –£–¥–∞—á–∏! üòâ',
                Markup.inlineKeyboard([
                    Markup.callbackButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'menu-scene'),
                ]).extra()) 
            }).then(() => {
                fs.unlink(`${ctx.from.id}.pdf`, (err) => {
                    if (err) throw err;
                })
                fs.unlink(`${ctx.update.message.from.id}.jpg`, (err) => {
                    if (err) throw err;
                    })
                } 
            )

            return ctx.scene.leave() 
        }

        

                                
    },
).action('back', (ctx) => {
    ctx.wizard.cursor = ctx.wizard.cursor-2
    ctx.wizard.selectStep(ctx.wizard.cursor) 
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
})
.action('removePros', async (ctx) => {
    await userModel.findOneAndUpdate({telegramId: ctx.from.id}, {$pull: {proskills: {name: ctx.callbackQuery.message.text}}})
    ctx.deleteMessage(ctx.id)
})
.action('removeLang', async (ctx) => {
    await userModel.findOneAndUpdate({telegramId: ctx.from.id}, {$pull: {languages: {name: ctx.callbackQuery.message.text}}})
    ctx.deleteMessage(ctx.id)
})
.action('removeUniver', async (ctx) => {
    await userModel.findOneAndUpdate({telegramId: ctx.from.id}, {$pull: {education: {univerName: ctx.callbackQuery.message.text}}})
    ctx.deleteMessage(ctx.id)
})
.action('removeWork', async (ctx) => {
    await userModel.findOneAndUpdate({telegramId: ctx.from.id}, {$pull: {experience: {companyName: ctx.callbackQuery.message.text}}})
    ctx.deleteMessage(ctx.id)
})
.action('nextExtra', (ctx) => {
    
    ctx.wizard.next();
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
})
.action('nextEdu', (ctx) => {
    ctx.wizard.selectStep(19) 
    return ctx.wizard.steps[19](ctx);
})
.action('backEdu', (ctx) => {
    ctx.wizard.selectStep(12) 
    return ctx.wizard.steps[12](ctx);
})
.action('nextExp', (ctx) => {
    ctx.wizard.selectStep(26) 
    return ctx.wizard.steps[26](ctx);
})
.action('backExtra', (ctx) => {
    ctx.wizard.cursor = ctx.wizard.cursor-3
    ctx.wizard.selectStep(ctx.wizard.cursor) 
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
})
.action('backUltra', (ctx) => {
    ctx.wizard.cursor = ctx.wizard.cursor-7
    ctx.wizard.selectStep(ctx.wizard.cursor) 
    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
})



module.exports = create_pdf

